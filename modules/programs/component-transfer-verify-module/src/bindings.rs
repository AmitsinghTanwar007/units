// Generated by `wit-bindgen` 0.36.0. DO NOT EDIT!
// Options used:
//   * runtime_path: "wit_bindgen_rt"
#[derive(Clone)]
pub enum UserError {
    PermissionDenied(_rt::String),
    SystemError(_rt::String),
    InvalidInput(_rt::String),
    Failure(_rt::String),
    UnknownError(_rt::String),
}
impl ::core::fmt::Debug for UserError {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        match self {
            UserError::PermissionDenied(e) => {
                f.debug_tuple("UserError::PermissionDenied").field(e).finish()
            }
            UserError::SystemError(e) => {
                f.debug_tuple("UserError::SystemError").field(e).finish()
            }
            UserError::InvalidInput(e) => {
                f.debug_tuple("UserError::InvalidInput").field(e).finish()
            }
            UserError::Failure(e) => {
                f.debug_tuple("UserError::Failure").field(e).finish()
            }
            UserError::UnknownError(e) => {
                f.debug_tuple("UserError::UnknownError").field(e).finish()
            }
        }
    }
}
impl ::core::fmt::Display for UserError {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(f, "{:?}", self)
    }
}
impl std::error::Error for UserError {}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_main_cabi<T: Guest>(arg0: *mut u8, arg1: usize) -> *mut u8 {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let len0 = arg1;
    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
    let result1 = T::main(_rt::string_lift(bytes0));
    let ptr2 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
    match result1 {
        Ok(e) => {
            *ptr2.add(0).cast::<u8>() = (0i32) as u8;
            let vec3 = (e.into_bytes()).into_boxed_slice();
            let ptr3 = vec3.as_ptr().cast::<u8>();
            let len3 = vec3.len();
            ::core::mem::forget(vec3);
            *ptr2.add(8).cast::<usize>() = len3;
            *ptr2.add(4).cast::<*mut u8>() = ptr3.cast_mut();
        }
        Err(e) => {
            *ptr2.add(0).cast::<u8>() = (1i32) as u8;
            match e {
                UserError::PermissionDenied(e) => {
                    *ptr2.add(4).cast::<u8>() = (0i32) as u8;
                    let vec4 = (e.into_bytes()).into_boxed_slice();
                    let ptr4 = vec4.as_ptr().cast::<u8>();
                    let len4 = vec4.len();
                    ::core::mem::forget(vec4);
                    *ptr2.add(12).cast::<usize>() = len4;
                    *ptr2.add(8).cast::<*mut u8>() = ptr4.cast_mut();
                }
                UserError::SystemError(e) => {
                    *ptr2.add(4).cast::<u8>() = (1i32) as u8;
                    let vec5 = (e.into_bytes()).into_boxed_slice();
                    let ptr5 = vec5.as_ptr().cast::<u8>();
                    let len5 = vec5.len();
                    ::core::mem::forget(vec5);
                    *ptr2.add(12).cast::<usize>() = len5;
                    *ptr2.add(8).cast::<*mut u8>() = ptr5.cast_mut();
                }
                UserError::InvalidInput(e) => {
                    *ptr2.add(4).cast::<u8>() = (2i32) as u8;
                    let vec6 = (e.into_bytes()).into_boxed_slice();
                    let ptr6 = vec6.as_ptr().cast::<u8>();
                    let len6 = vec6.len();
                    ::core::mem::forget(vec6);
                    *ptr2.add(12).cast::<usize>() = len6;
                    *ptr2.add(8).cast::<*mut u8>() = ptr6.cast_mut();
                }
                UserError::Failure(e) => {
                    *ptr2.add(4).cast::<u8>() = (3i32) as u8;
                    let vec7 = (e.into_bytes()).into_boxed_slice();
                    let ptr7 = vec7.as_ptr().cast::<u8>();
                    let len7 = vec7.len();
                    ::core::mem::forget(vec7);
                    *ptr2.add(12).cast::<usize>() = len7;
                    *ptr2.add(8).cast::<*mut u8>() = ptr7.cast_mut();
                }
                UserError::UnknownError(e) => {
                    *ptr2.add(4).cast::<u8>() = (4i32) as u8;
                    let vec8 = (e.into_bytes()).into_boxed_slice();
                    let ptr8 = vec8.as_ptr().cast::<u8>();
                    let len8 = vec8.len();
                    ::core::mem::forget(vec8);
                    *ptr2.add(12).cast::<usize>() = len8;
                    *ptr2.add(8).cast::<*mut u8>() = ptr8.cast_mut();
                }
            }
        }
    };
    ptr2
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn __post_return_main<T: Guest>(arg0: *mut u8) {
    let l0 = i32::from(*arg0.add(0).cast::<u8>());
    match l0 {
        0 => {
            let l1 = *arg0.add(4).cast::<*mut u8>();
            let l2 = *arg0.add(8).cast::<usize>();
            _rt::cabi_dealloc(l1, l2, 1);
        }
        _ => {
            let l3 = i32::from(*arg0.add(4).cast::<u8>());
            match l3 {
                0 => {
                    let l4 = *arg0.add(8).cast::<*mut u8>();
                    let l5 = *arg0.add(12).cast::<usize>();
                    _rt::cabi_dealloc(l4, l5, 1);
                }
                1 => {
                    let l6 = *arg0.add(8).cast::<*mut u8>();
                    let l7 = *arg0.add(12).cast::<usize>();
                    _rt::cabi_dealloc(l6, l7, 1);
                }
                2 => {
                    let l8 = *arg0.add(8).cast::<*mut u8>();
                    let l9 = *arg0.add(12).cast::<usize>();
                    _rt::cabi_dealloc(l8, l9, 1);
                }
                3 => {
                    let l10 = *arg0.add(8).cast::<*mut u8>();
                    let l11 = *arg0.add(12).cast::<usize>();
                    _rt::cabi_dealloc(l10, l11, 1);
                }
                _ => {
                    let l12 = *arg0.add(8).cast::<*mut u8>();
                    let l13 = *arg0.add(12).cast::<usize>();
                    _rt::cabi_dealloc(l12, l13, 1);
                }
            }
        }
    }
}
pub trait Guest {
    fn main(input: _rt::String) -> Result<_rt::String, UserError>;
}
#[doc(hidden)]
macro_rules! __export_world_module_world_cabi {
    ($ty:ident with_types_in $($path_to_types:tt)*) => {
        const _ : () = { #[export_name = "main"] unsafe extern "C" fn export_main(arg0 :
        * mut u8, arg1 : usize,) -> * mut u8 { $($path_to_types)*::
        _export_main_cabi::<$ty > (arg0, arg1) } #[export_name = "cabi_post_main"] unsafe
        extern "C" fn _post_return_main(arg0 : * mut u8,) { $($path_to_types)*::
        __post_return_main::<$ty > (arg0) } };
    };
}
#[doc(hidden)]
pub(crate) use __export_world_module_world_cabi;
#[repr(align(4))]
struct _RetArea([::core::mem::MaybeUninit<u8>; 16]);
static mut _RET_AREA: _RetArea = _RetArea([::core::mem::MaybeUninit::uninit(); 16]);
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod component {
    pub mod units {
        #[allow(dead_code, clippy::all)]
        pub mod driver {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            #[derive(Clone)]
            pub enum DriverError {
                PermissionDenied(_rt::String),
                SystemError(_rt::String),
                InvalidInput(_rt::String),
                UnknownError(_rt::String),
            }
            impl ::core::fmt::Debug for DriverError {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        DriverError::PermissionDenied(e) => {
                            f.debug_tuple("DriverError::PermissionDenied")
                                .field(e)
                                .finish()
                        }
                        DriverError::SystemError(e) => {
                            f.debug_tuple("DriverError::SystemError").field(e).finish()
                        }
                        DriverError::InvalidInput(e) => {
                            f.debug_tuple("DriverError::InvalidInput").field(e).finish()
                        }
                        DriverError::UnknownError(e) => {
                            f.debug_tuple("DriverError::UnknownError").field(e).finish()
                        }
                    }
                }
            }
            impl ::core::fmt::Display for DriverError {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    write!(f, "{:?}", self)
                }
            }
            impl std::error::Error for DriverError {}
            #[allow(unused_unsafe, clippy::all)]
            pub fn intend(input: &str) -> Result<_rt::String, DriverError> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                    let vec0 = input;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "component:units/driver")]
                    extern "C" {
                        #[link_name = "intend"]
                        fn wit_import(_: *mut u8, _: usize, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8, _: usize, _: *mut u8) {
                        unreachable!()
                    }
                    wit_import(ptr0.cast_mut(), len0, ptr1);
                    let l2 = i32::from(*ptr1.add(0).cast::<u8>());
                    match l2 {
                        0 => {
                            let e = {
                                let l3 = *ptr1.add(4).cast::<*mut u8>();
                                let l4 = *ptr1.add(8).cast::<usize>();
                                let len5 = l4;
                                let bytes5 = _rt::Vec::from_raw_parts(
                                    l3.cast(),
                                    len5,
                                    len5,
                                );
                                _rt::string_lift(bytes5)
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l6 = i32::from(*ptr1.add(4).cast::<u8>());
                                let v19 = match l6 {
                                    0 => {
                                        let e19 = {
                                            let l7 = *ptr1.add(8).cast::<*mut u8>();
                                            let l8 = *ptr1.add(12).cast::<usize>();
                                            let len9 = l8;
                                            let bytes9 = _rt::Vec::from_raw_parts(
                                                l7.cast(),
                                                len9,
                                                len9,
                                            );
                                            _rt::string_lift(bytes9)
                                        };
                                        DriverError::PermissionDenied(e19)
                                    }
                                    1 => {
                                        let e19 = {
                                            let l10 = *ptr1.add(8).cast::<*mut u8>();
                                            let l11 = *ptr1.add(12).cast::<usize>();
                                            let len12 = l11;
                                            let bytes12 = _rt::Vec::from_raw_parts(
                                                l10.cast(),
                                                len12,
                                                len12,
                                            );
                                            _rt::string_lift(bytes12)
                                        };
                                        DriverError::SystemError(e19)
                                    }
                                    2 => {
                                        let e19 = {
                                            let l13 = *ptr1.add(8).cast::<*mut u8>();
                                            let l14 = *ptr1.add(12).cast::<usize>();
                                            let len15 = l14;
                                            let bytes15 = _rt::Vec::from_raw_parts(
                                                l13.cast(),
                                                len15,
                                                len15,
                                            );
                                            _rt::string_lift(bytes15)
                                        };
                                        DriverError::InvalidInput(e19)
                                    }
                                    n => {
                                        debug_assert_eq!(n, 3, "invalid enum discriminant");
                                        let e19 = {
                                            let l16 = *ptr1.add(8).cast::<*mut u8>();
                                            let l17 = *ptr1.add(12).cast::<usize>();
                                            let len18 = l17;
                                            let bytes18 = _rt::Vec::from_raw_parts(
                                                l16.cast(),
                                                len18,
                                                len18,
                                            );
                                            _rt::string_lift(bytes18)
                                        };
                                        DriverError::UnknownError(e19)
                                    }
                                };
                                v19
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn done(input: &str) -> Result<(), DriverError> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                    let vec0 = input;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "component:units/driver")]
                    extern "C" {
                        #[link_name = "done"]
                        fn wit_import(_: *mut u8, _: usize, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8, _: usize, _: *mut u8) {
                        unreachable!()
                    }
                    wit_import(ptr0.cast_mut(), len0, ptr1);
                    let l2 = i32::from(*ptr1.add(0).cast::<u8>());
                    match l2 {
                        0 => {
                            let e = ();
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l3 = i32::from(*ptr1.add(4).cast::<u8>());
                                let v16 = match l3 {
                                    0 => {
                                        let e16 = {
                                            let l4 = *ptr1.add(8).cast::<*mut u8>();
                                            let l5 = *ptr1.add(12).cast::<usize>();
                                            let len6 = l5;
                                            let bytes6 = _rt::Vec::from_raw_parts(
                                                l4.cast(),
                                                len6,
                                                len6,
                                            );
                                            _rt::string_lift(bytes6)
                                        };
                                        DriverError::PermissionDenied(e16)
                                    }
                                    1 => {
                                        let e16 = {
                                            let l7 = *ptr1.add(8).cast::<*mut u8>();
                                            let l8 = *ptr1.add(12).cast::<usize>();
                                            let len9 = l8;
                                            let bytes9 = _rt::Vec::from_raw_parts(
                                                l7.cast(),
                                                len9,
                                                len9,
                                            );
                                            _rt::string_lift(bytes9)
                                        };
                                        DriverError::SystemError(e16)
                                    }
                                    2 => {
                                        let e16 = {
                                            let l10 = *ptr1.add(8).cast::<*mut u8>();
                                            let l11 = *ptr1.add(12).cast::<usize>();
                                            let len12 = l11;
                                            let bytes12 = _rt::Vec::from_raw_parts(
                                                l10.cast(),
                                                len12,
                                                len12,
                                            );
                                            _rt::string_lift(bytes12)
                                        };
                                        DriverError::InvalidInput(e16)
                                    }
                                    n => {
                                        debug_assert_eq!(n, 3, "invalid enum discriminant");
                                        let e16 = {
                                            let l13 = *ptr1.add(8).cast::<*mut u8>();
                                            let l14 = *ptr1.add(12).cast::<usize>();
                                            let len15 = l14;
                                            let bytes15 = _rt::Vec::from_raw_parts(
                                                l13.cast(),
                                                len15,
                                                len15,
                                            );
                                            _rt::string_lift(bytes15)
                                        };
                                        DriverError::UnknownError(e16)
                                    }
                                };
                                v16
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn transfer(
                fro: &str,
                to: &str,
                value: &str,
            ) -> Result<(), DriverError> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                    let vec0 = fro;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let vec1 = to;
                    let ptr1 = vec1.as_ptr().cast::<u8>();
                    let len1 = vec1.len();
                    let vec2 = value;
                    let ptr2 = vec2.as_ptr().cast::<u8>();
                    let len2 = vec2.len();
                    let ptr3 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "component:units/driver")]
                    extern "C" {
                        #[link_name = "transfer"]
                        fn wit_import(
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    wit_import(
                        ptr0.cast_mut(),
                        len0,
                        ptr1.cast_mut(),
                        len1,
                        ptr2.cast_mut(),
                        len2,
                        ptr3,
                    );
                    let l4 = i32::from(*ptr3.add(0).cast::<u8>());
                    match l4 {
                        0 => {
                            let e = ();
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l5 = i32::from(*ptr3.add(4).cast::<u8>());
                                let v18 = match l5 {
                                    0 => {
                                        let e18 = {
                                            let l6 = *ptr3.add(8).cast::<*mut u8>();
                                            let l7 = *ptr3.add(12).cast::<usize>();
                                            let len8 = l7;
                                            let bytes8 = _rt::Vec::from_raw_parts(
                                                l6.cast(),
                                                len8,
                                                len8,
                                            );
                                            _rt::string_lift(bytes8)
                                        };
                                        DriverError::PermissionDenied(e18)
                                    }
                                    1 => {
                                        let e18 = {
                                            let l9 = *ptr3.add(8).cast::<*mut u8>();
                                            let l10 = *ptr3.add(12).cast::<usize>();
                                            let len11 = l10;
                                            let bytes11 = _rt::Vec::from_raw_parts(
                                                l9.cast(),
                                                len11,
                                                len11,
                                            );
                                            _rt::string_lift(bytes11)
                                        };
                                        DriverError::SystemError(e18)
                                    }
                                    2 => {
                                        let e18 = {
                                            let l12 = *ptr3.add(8).cast::<*mut u8>();
                                            let l13 = *ptr3.add(12).cast::<usize>();
                                            let len14 = l13;
                                            let bytes14 = _rt::Vec::from_raw_parts(
                                                l12.cast(),
                                                len14,
                                                len14,
                                            );
                                            _rt::string_lift(bytes14)
                                        };
                                        DriverError::InvalidInput(e18)
                                    }
                                    n => {
                                        debug_assert_eq!(n, 3, "invalid enum discriminant");
                                        let e18 = {
                                            let l15 = *ptr3.add(8).cast::<*mut u8>();
                                            let l16 = *ptr3.add(12).cast::<usize>();
                                            let len17 = l16;
                                            let bytes17 = _rt::Vec::from_raw_parts(
                                                l15.cast(),
                                                len17,
                                                len17,
                                            );
                                            _rt::string_lift(bytes17)
                                        };
                                        DriverError::UnknownError(e18)
                                    }
                                };
                                v18
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn view(input: &str) -> Result<_rt::String, DriverError> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                    let vec0 = input;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "component:units/driver")]
                    extern "C" {
                        #[link_name = "view"]
                        fn wit_import(_: *mut u8, _: usize, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8, _: usize, _: *mut u8) {
                        unreachable!()
                    }
                    wit_import(ptr0.cast_mut(), len0, ptr1);
                    let l2 = i32::from(*ptr1.add(0).cast::<u8>());
                    match l2 {
                        0 => {
                            let e = {
                                let l3 = *ptr1.add(4).cast::<*mut u8>();
                                let l4 = *ptr1.add(8).cast::<usize>();
                                let len5 = l4;
                                let bytes5 = _rt::Vec::from_raw_parts(
                                    l3.cast(),
                                    len5,
                                    len5,
                                );
                                _rt::string_lift(bytes5)
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l6 = i32::from(*ptr1.add(4).cast::<u8>());
                                let v19 = match l6 {
                                    0 => {
                                        let e19 = {
                                            let l7 = *ptr1.add(8).cast::<*mut u8>();
                                            let l8 = *ptr1.add(12).cast::<usize>();
                                            let len9 = l8;
                                            let bytes9 = _rt::Vec::from_raw_parts(
                                                l7.cast(),
                                                len9,
                                                len9,
                                            );
                                            _rt::string_lift(bytes9)
                                        };
                                        DriverError::PermissionDenied(e19)
                                    }
                                    1 => {
                                        let e19 = {
                                            let l10 = *ptr1.add(8).cast::<*mut u8>();
                                            let l11 = *ptr1.add(12).cast::<usize>();
                                            let len12 = l11;
                                            let bytes12 = _rt::Vec::from_raw_parts(
                                                l10.cast(),
                                                len12,
                                                len12,
                                            );
                                            _rt::string_lift(bytes12)
                                        };
                                        DriverError::SystemError(e19)
                                    }
                                    2 => {
                                        let e19 = {
                                            let l13 = *ptr1.add(8).cast::<*mut u8>();
                                            let l14 = *ptr1.add(12).cast::<usize>();
                                            let len15 = l14;
                                            let bytes15 = _rt::Vec::from_raw_parts(
                                                l13.cast(),
                                                len15,
                                                len15,
                                            );
                                            _rt::string_lift(bytes15)
                                        };
                                        DriverError::InvalidInput(e19)
                                    }
                                    n => {
                                        debug_assert_eq!(n, 3, "invalid enum discriminant");
                                        let e19 = {
                                            let l16 = *ptr1.add(8).cast::<*mut u8>();
                                            let l17 = *ptr1.add(12).cast::<usize>();
                                            let len18 = l17;
                                            let bytes18 = _rt::Vec::from_raw_parts(
                                                l16.cast(),
                                                len18,
                                                len18,
                                            );
                                            _rt::string_lift(bytes18)
                                        };
                                        DriverError::UnknownError(e19)
                                    }
                                };
                                v19
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn bind(
                input: &str,
                existing: Option<&str>,
            ) -> Result<_rt::String, DriverError> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                    let vec0 = input;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let (result2_0, result2_1, result2_2) = match existing {
                        Some(e) => {
                            let vec1 = e;
                            let ptr1 = vec1.as_ptr().cast::<u8>();
                            let len1 = vec1.len();
                            (1i32, ptr1.cast_mut(), len1)
                        }
                        None => (0i32, ::core::ptr::null_mut(), 0usize),
                    };
                    let ptr3 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "component:units/driver")]
                    extern "C" {
                        #[link_name = "bind"]
                        fn wit_import(
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(
                        _: *mut u8,
                        _: usize,
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    wit_import(
                        ptr0.cast_mut(),
                        len0,
                        result2_0,
                        result2_1,
                        result2_2,
                        ptr3,
                    );
                    let l4 = i32::from(*ptr3.add(0).cast::<u8>());
                    match l4 {
                        0 => {
                            let e = {
                                let l5 = *ptr3.add(4).cast::<*mut u8>();
                                let l6 = *ptr3.add(8).cast::<usize>();
                                let len7 = l6;
                                let bytes7 = _rt::Vec::from_raw_parts(
                                    l5.cast(),
                                    len7,
                                    len7,
                                );
                                _rt::string_lift(bytes7)
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l8 = i32::from(*ptr3.add(4).cast::<u8>());
                                let v21 = match l8 {
                                    0 => {
                                        let e21 = {
                                            let l9 = *ptr3.add(8).cast::<*mut u8>();
                                            let l10 = *ptr3.add(12).cast::<usize>();
                                            let len11 = l10;
                                            let bytes11 = _rt::Vec::from_raw_parts(
                                                l9.cast(),
                                                len11,
                                                len11,
                                            );
                                            _rt::string_lift(bytes11)
                                        };
                                        DriverError::PermissionDenied(e21)
                                    }
                                    1 => {
                                        let e21 = {
                                            let l12 = *ptr3.add(8).cast::<*mut u8>();
                                            let l13 = *ptr3.add(12).cast::<usize>();
                                            let len14 = l13;
                                            let bytes14 = _rt::Vec::from_raw_parts(
                                                l12.cast(),
                                                len14,
                                                len14,
                                            );
                                            _rt::string_lift(bytes14)
                                        };
                                        DriverError::SystemError(e21)
                                    }
                                    2 => {
                                        let e21 = {
                                            let l15 = *ptr3.add(8).cast::<*mut u8>();
                                            let l16 = *ptr3.add(12).cast::<usize>();
                                            let len17 = l16;
                                            let bytes17 = _rt::Vec::from_raw_parts(
                                                l15.cast(),
                                                len17,
                                                len17,
                                            );
                                            _rt::string_lift(bytes17)
                                        };
                                        DriverError::InvalidInput(e21)
                                    }
                                    n => {
                                        debug_assert_eq!(n, 3, "invalid enum discriminant");
                                        let e21 = {
                                            let l18 = *ptr3.add(8).cast::<*mut u8>();
                                            let l19 = *ptr3.add(12).cast::<usize>();
                                            let len20 = l19;
                                            let bytes20 = _rt::Vec::from_raw_parts(
                                                l18.cast(),
                                                len20,
                                                len20,
                                            );
                                            _rt::string_lift(bytes20)
                                        };
                                        DriverError::UnknownError(e21)
                                    }
                                };
                                v21
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
        }
    }
}
#[rustfmt::skip]
mod _rt {
    pub use alloc_crate::string::String;
    pub use alloc_crate::vec::Vec;
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    pub unsafe fn invalid_enum_discriminant<T>() -> T {
        if cfg!(debug_assertions) {
            panic!("invalid enum discriminant")
        } else {
            core::hint::unreachable_unchecked()
        }
    }
    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr, layout);
    }
    extern crate alloc as alloc_crate;
    pub use alloc_crate::alloc;
}
/// Generates `#[no_mangle]` functions to export the specified type as the
/// root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]
macro_rules! __export_module_world_impl {
    ($ty:ident) => {
        self::export!($ty with_types_in self);
    };
    ($ty:ident with_types_in $($path_to_types_root:tt)*) => {
        $($path_to_types_root)*:: __export_world_module_world_cabi!($ty with_types_in
        $($path_to_types_root)*);
    };
}
#[doc(inline)]
pub(crate) use __export_module_world_impl as export;
#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:wit-bindgen:0.36.0:component:units:module-world:encoded world"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 552] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xa5\x03\x01A\x02\x01\
A\x07\x01q\x05\x11permission-denied\x01s\0\x0csystem-error\x01s\0\x0dinvalid-inp\
ut\x01s\0\x07failure\x01s\0\x0dunknown-error\x01s\0\x03\0\x0auser-error\x03\0\0\x01\
B\x0e\x01q\x04\x11permission-denied\x01s\0\x0csystem-error\x01s\0\x0dinvalid-inp\
ut\x01s\0\x0dunknown-error\x01s\0\x04\0\x0cdriver-error\x03\0\0\x01j\x01s\x01\x01\
\x01@\x01\x05inputs\0\x02\x04\0\x06intend\x01\x03\x01j\0\x01\x01\x01@\x01\x05inp\
uts\0\x04\x04\0\x04done\x01\x05\x01@\x03\x03fros\x02tos\x05values\0\x04\x04\0\x08\
transfer\x01\x06\x04\0\x04view\x01\x03\x01ks\x01@\x02\x05inputs\x08existing\x07\0\
\x02\x04\0\x04bind\x01\x08\x03\0\x16component:units/driver\x05\x02\x01j\x01s\x01\
\x01\x01@\x01\x05inputs\0\x03\x04\0\x04main\x01\x04\x04\0\x1ccomponent:units/mod\
ule-world\x04\0\x0b\x12\x01\0\x0cmodule-world\x03\0\0\0G\x09producers\x01\x0cpro\
cessed-by\x02\x0dwit-component\x070.220.0\x10wit-bindgen-rust\x060.36.0";
#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
