/**
 * @fileoverview gRPC-Web generated client stub for finternet
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.29.2
// source: finternet.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as finternet_pb from './finternet_pb'; // proto import: "finternet.proto"


export class DriverClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorLoadDriver = new grpcWeb.MethodDescriptor(
    '/finternet.Driver/LoadDriver',
    grpcWeb.MethodType.UNARY,
    finternet_pb.LoadDriverRequest,
    finternet_pb.LoadDriverResponse,
    (request: finternet_pb.LoadDriverRequest) => {
      return request.serializeBinary();
    },
    finternet_pb.LoadDriverResponse.deserializeBinary
  );

  loadDriver(
    request: finternet_pb.LoadDriverRequest,
    metadata?: grpcWeb.Metadata | null): Promise<finternet_pb.LoadDriverResponse>;

  loadDriver(
    request: finternet_pb.LoadDriverRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: finternet_pb.LoadDriverResponse) => void): grpcWeb.ClientReadableStream<finternet_pb.LoadDriverResponse>;

  loadDriver(
    request: finternet_pb.LoadDriverRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: finternet_pb.LoadDriverResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/finternet.Driver/LoadDriver',
        request,
        metadata || {},
        this.methodDescriptorLoadDriver,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/finternet.Driver/LoadDriver',
    request,
    metadata || {},
    this.methodDescriptorLoadDriver);
  }

  methodDescriptorUnloadDriver = new grpcWeb.MethodDescriptor(
    '/finternet.Driver/UnloadDriver',
    grpcWeb.MethodType.UNARY,
    finternet_pb.UnloadDriverRequest,
    finternet_pb.UnloadDriverResponse,
    (request: finternet_pb.UnloadDriverRequest) => {
      return request.serializeBinary();
    },
    finternet_pb.UnloadDriverResponse.deserializeBinary
  );

  unloadDriver(
    request: finternet_pb.UnloadDriverRequest,
    metadata?: grpcWeb.Metadata | null): Promise<finternet_pb.UnloadDriverResponse>;

  unloadDriver(
    request: finternet_pb.UnloadDriverRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: finternet_pb.UnloadDriverResponse) => void): grpcWeb.ClientReadableStream<finternet_pb.UnloadDriverResponse>;

  unloadDriver(
    request: finternet_pb.UnloadDriverRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: finternet_pb.UnloadDriverResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/finternet.Driver/UnloadDriver',
        request,
        metadata || {},
        this.methodDescriptorUnloadDriver,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/finternet.Driver/UnloadDriver',
    request,
    metadata || {},
    this.methodDescriptorUnloadDriver);
  }

}

export class BindClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorBind = new grpcWeb.MethodDescriptor(
    '/finternet.Bind/Bind',
    grpcWeb.MethodType.UNARY,
    finternet_pb.BindRequest,
    finternet_pb.BindResponse,
    (request: finternet_pb.BindRequest) => {
      return request.serializeBinary();
    },
    finternet_pb.BindResponse.deserializeBinary
  );

  bind(
    request: finternet_pb.BindRequest,
    metadata?: grpcWeb.Metadata | null): Promise<finternet_pb.BindResponse>;

  bind(
    request: finternet_pb.BindRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: finternet_pb.BindResponse) => void): grpcWeb.ClientReadableStream<finternet_pb.BindResponse>;

  bind(
    request: finternet_pb.BindRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: finternet_pb.BindResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/finternet.Bind/Bind',
        request,
        metadata || {},
        this.methodDescriptorBind,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/finternet.Bind/Bind',
    request,
    metadata || {},
    this.methodDescriptorBind);
  }

  methodDescriptorUnbind = new grpcWeb.MethodDescriptor(
    '/finternet.Bind/Unbind',
    grpcWeb.MethodType.UNARY,
    finternet_pb.UnbindRequest,
    finternet_pb.UnbindResponse,
    (request: finternet_pb.UnbindRequest) => {
      return request.serializeBinary();
    },
    finternet_pb.UnbindResponse.deserializeBinary
  );

  unbind(
    request: finternet_pb.UnbindRequest,
    metadata?: grpcWeb.Metadata | null): Promise<finternet_pb.UnbindResponse>;

  unbind(
    request: finternet_pb.UnbindRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: finternet_pb.UnbindResponse) => void): grpcWeb.ClientReadableStream<finternet_pb.UnbindResponse>;

  unbind(
    request: finternet_pb.UnbindRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: finternet_pb.UnbindResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/finternet.Bind/Unbind',
        request,
        metadata || {},
        this.methodDescriptorUnbind,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/finternet.Bind/Unbind',
    request,
    metadata || {},
    this.methodDescriptorUnbind);
  }

}

export class ExecutionClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorExecute = new grpcWeb.MethodDescriptor(
    '/finternet.Execution/Execute',
    grpcWeb.MethodType.UNARY,
    finternet_pb.ExecutionRequest,
    finternet_pb.ExecutionResponse,
    (request: finternet_pb.ExecutionRequest) => {
      return request.serializeBinary();
    },
    finternet_pb.ExecutionResponse.deserializeBinary
  );

  execute(
    request: finternet_pb.ExecutionRequest,
    metadata?: grpcWeb.Metadata | null): Promise<finternet_pb.ExecutionResponse>;

  execute(
    request: finternet_pb.ExecutionRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: finternet_pb.ExecutionResponse) => void): grpcWeb.ClientReadableStream<finternet_pb.ExecutionResponse>;

  execute(
    request: finternet_pb.ExecutionRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: finternet_pb.ExecutionResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/finternet.Execution/Execute',
        request,
        metadata || {},
        this.methodDescriptorExecute,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/finternet.Execution/Execute',
    request,
    metadata || {},
    this.methodDescriptorExecute);
  }

}

export class DriverDetailsClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorSendDetails = new grpcWeb.MethodDescriptor(
    '/finternet.DriverDetails/SendDetails',
    grpcWeb.MethodType.UNARY,
    finternet_pb.DriverDetailsRequest,
    finternet_pb.DriverDetailsResponse,
    (request: finternet_pb.DriverDetailsRequest) => {
      return request.serializeBinary();
    },
    finternet_pb.DriverDetailsResponse.deserializeBinary
  );

  sendDetails(
    request: finternet_pb.DriverDetailsRequest,
    metadata?: grpcWeb.Metadata | null): Promise<finternet_pb.DriverDetailsResponse>;

  sendDetails(
    request: finternet_pb.DriverDetailsRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: finternet_pb.DriverDetailsResponse) => void): grpcWeb.ClientReadableStream<finternet_pb.DriverDetailsResponse>;

  sendDetails(
    request: finternet_pb.DriverDetailsRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: finternet_pb.DriverDetailsResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/finternet.DriverDetails/SendDetails',
        request,
        metadata || {},
        this.methodDescriptorSendDetails,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/finternet.DriverDetails/SendDetails',
    request,
    metadata || {},
    this.methodDescriptorSendDetails);
  }

}

